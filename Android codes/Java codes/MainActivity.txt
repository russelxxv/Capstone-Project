MainActivity.java

package com.colegiodemontalban.speakingglove.psdspeakingglove;

import android.Manifest;
import android.app.ProgressDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.database.Cursor;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Handler;
import android.speech.RecognizerIntent;
import android.support.annotation.Nullable;
import android.support.annotation.RequiresApi;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.Toolbar;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import android.util.Log;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Set;
import java.util.UUID;

public class MainActivity extends AppCompatActivity {

    boolean mProgressing;
    private TextView txvResult;
    DatabaseHelper myDB;
    Cursor cursor_speech, ttp_id;
    private DrawerLayout mDrawerLayout;
    BluetoothAdapter bluetoothAdapter;
    Intent btEnablingIntent;
    int requestCodeForeEnable;
    Handler handler;
    final int RECIEVE_MESSAGE = 1;
    private StringBuilder sb = new StringBuilder();
    ProgressDialog mProgress;
    public ArrayList<BluetoothDevice> mBTDevices= new ArrayList<>();
    private static final UUID MY_UUID_INSECURE =
            UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");
    private final String MY_BT_ADDRESS = "00:21:13:01:11:A9";
    BluetoothDevice mBTDevice;

    private String TAG; // Just for logging purposes. Could be anything. Set to app_name


    @Override
    protected void onDestroy() {
        super.onDestroy();
        unregisterReceiver(mBroadcastReceiver1);
        unregisterReceiver(mBroadcastReceiver2);
    }

    boolean twice;
    @Override
    public void onBackPressed() {
        if (twice) {
            Intent intent = new Intent(Intent.ACTION_MAIN);
            intent.addCategory(Intent.CATEGORY_HOME);
            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
            startActivity(intent);
            finish();
            System.exit(0);
        }
        twice = true;
        Toast.makeText(MainActivity.this, "Press back again to Exit", Toast.LENGTH_LONG).show();
        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                twice = false;
            }
        }, 2000);
        //
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mProgressing = false;
        ///****************************** BELOW IS THE CODE FOR BLUETOOTH VARIABLE***********
        TAG = getResources().getString(R.string.app_name);
        bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        btEnablingIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
        requestCodeForeEnable = 1;
        IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_BOND_STATE_CHANGED);
        registerReceiver(mBroadcastReceiver2, filter);
        ///****************************** BELOW IS THE CODE FOR DATABASE *************
        final DatabaseHelper[] myDB = {new DatabaseHelper(this)};
        String getRows_speech_text = "SELECT * FROM "+ DatabaseHelper.TB_SpeechText;
        cursor_speech = myDB[0].getWritableDatabase().rawQuery(getRows_speech_text, null);
        if (cursor_speech.getCount() < 1) {
            int i = 1;
           while (i != 51) {
               myDB[0].addData("Not Set");
               i++;
            }
            cursor_speech.close();
        }
   ///*************************PAIRING THE DEVICE WITH AUTOMATICALLY
        bluetoothONmethod();
        settingUpBluetooth();
    ///**********END BLUETOOTH PAIRING


        handler = new Handler() {
            public void handleMessage(android.os.Message msg) {
                switch (msg.what) {
                    case RECIEVE_MESSAGE:
                        byte[] readBuf = (byte[]) msg.obj;
                        String strIncom = new String(readBuf, 0, msg.arg1);
                        sb.append(strIncom);
                        int endOfLineIndex = sb.indexOf("\r\n");
                        if (endOfLineIndex > 0) {
                            String sbprint = sb.substring(0, endOfLineIndex);
                            sb.delete(0, sb.length());
                            //txtArduino.setText("Data from Arduino: " + sbprint);
                            receiveMsgsCatcher(sbprint);
                        }
                        Log.d(TAG, "...String:"+ sb.toString() +  "Byte:" + msg.arg1 + "...");
                        break;
                }
            };
        };


        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        ActionBar actionbar = getSupportActionBar();
        actionbar.setDisplayHomeAsUpEnabled(true);
        actionbar.setHomeAsUpIndicator(R.drawable.ic_menu);

        mDrawerLayout = findViewById(R.id.drawer_layout);
        NavigationView navigationView = findViewById(R.id.nav_view);

        if (savedInstanceState == null) {
            getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container,
                    new Home_Fragment()).commit();
            navigationView.setCheckedItem(R.id.nav_home);
        }

        navigationView.setNavigationItemSelectedListener(
                new NavigationView.OnNavigationItemSelectedListener() {
                    @Override
                    public boolean onNavigationItemSelected(final MenuItem menuItem) {
                        int id = menuItem.getItemId();

                        if (id == R.id.nav_exitprogram) {
                            android.os.Process.killProcess(android.os.Process.myPid());
                            System.exit(1);
                        }
                        else if(id == R.id.nav_bluetooth) {
                            if (!bluetoothAdapter.isEnabled()) {
                                startActivityForResult(btEnablingIntent, requestCodeForeEnable);
                            } else {
                                AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
                                builder.setTitle("Turn off Bluetooth?");
                                builder.setMessage("Click Yes to OFF bluetooth");
                                builder.setPositiveButton("YES", new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialogInterface, int i) {
                                        if (bluetoothAdapter.isEnabled()) {
                                            bluetoothAdapter.disable();
                                        }
                                        Toast.makeText(getApplicationContext(), "Bluetooth was OFF", Toast.LENGTH_LONG).show();
                                        mDrawerLayout.closeDrawers();
                                        menuItem.setTitle("BT is OFF");
                                    }
                                })
                                        .setNegativeButton("Cancel ", new DialogInterface.OnClickListener() {
                                            @Override
                                            public void onClick(DialogInterface dialogInterface, int i) {
                                                bluetoothAdapter.startDiscovery();
                                                Toast.makeText(getApplicationContext(), "Bluetooth Leave ON", Toast.LENGTH_SHORT).show();
                                            }
                                        });
                                AlertDialog dialog = builder.create();
                                dialog.show();
                            }
                        }
                        else if (id == R.id.nav_home) {
                            getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container,
                                    new Home_Fragment()).commit();
                        }
                        else {
                            if (id == R.id.nav_speech_totext) {
                                getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container,
                                        new SpeechText_Frag()).commit();
                            }
                        }
                        mDrawerLayout.closeDrawers();
                        return true;
                    }
                });
    }
    public void getSpeechInput(View view) {

        Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault());

        if (intent.resolveActivity(getPackageManager()) != null) {
            startActivityForResult(intent, 10);
        } else {
            Toast.makeText(this, "Your Device Don't Support Speech Input", Toast.LENGTH_SHORT).show();
        }
    }
    private void settingUpBluetooth() {
        Set<BluetoothDevice> pairedDevices = bluetoothAdapter.getBondedDevices();
        if(pairedDevices.size() > 0)
        {
            int pairedSuccess = 0;
            for(BluetoothDevice device : pairedDevices)
            {
                if (device.getAddress().equals(MY_BT_ADDRESS)) {
                    mBTDevice = device;
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    StartConnectBT();
                    pairedSuccess = 1;
                    break;
                } else {
                    pairedSuccess = 0;
                   // break;
                }
            }
            if (pairedSuccess != 1) {
                tryToFindSpeakingGlove();
            }
        }
    }

    private void tryToFindSpeakingGlove() {
        Toast.makeText(MainActivity.this, "Trying to find Speaking Gloves", Toast.LENGTH_LONG).show();
        if (bluetoothAdapter.isDiscovering()) {
            bluetoothAdapter.cancelDiscovery();
            // Log.d(TAG, "btnDiscover: Canceling discovery.");

            //check BT permissions in manifest
            Toast.makeText(MainActivity.this, "Trying to find Speaking Gloves", Toast.LENGTH_LONG).show();
            checkBTPermissions();
            mProgress = ProgressDialog.show(MainActivity.this, "Finding Speaking Glove"
                    , "Please wait...", true);

            bluetoothAdapter.startDiscovery();
            IntentFilter discoverDevicesIntent = new IntentFilter(BluetoothDevice.ACTION_FOUND);
            registerReceiver(mBroadcastReceiver1, discoverDevicesIntent);
        }
        if (!bluetoothAdapter.isDiscovering()) {


            Toast.makeText(MainActivity.this, "Trying to find Speaking Gloves", Toast.LENGTH_LONG).show();
            //check BT permissions in manifest
            checkBTPermissions();
            mProgress = ProgressDialog.show(MainActivity.this, "Finding Speaking Glove"
                    , "Please wait...", true);

            bluetoothAdapter.startDiscovery();
            IntentFilter discoverDevicesIntent = new IntentFilter(BluetoothDevice.ACTION_FOUND);
            registerReceiver(mBroadcastReceiver1, discoverDevicesIntent);
        }
    }

    private BroadcastReceiver mBroadcastReceiver1 = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            final String action = intent.getAction();
            Log.d(TAG, "onReceive: ACTION FOUND.");

            if (action.equals(BluetoothDevice.ACTION_FOUND)) {
                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                if (device.getAddress().equals(MY_BT_ADDRESS)) {
                    mBTDevice = device;
                    mBTDevices.add(device);
                    startTopair();
                }
            }
        }
    };

    private final BroadcastReceiver mBroadcastReceiver2 = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            final String action = intent.getAction();

            if(action.equals(BluetoothDevice.ACTION_BOND_STATE_CHANGED)){
                BluetoothDevice mDevice = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                //3 cases:
                //case1: bonded already
                if (mDevice.getBondState() == BluetoothDevice.BOND_BONDED){
                    Toast.makeText(getApplicationContext(), "Bonded succesfully to: Speaking Glove" ,Toast.LENGTH_LONG).show();
                    StartConnectBT();
                }/*
                //case2: creating a bone
                if (mDevice.getBondStat.e() == BluetoothDevice.BOND_BONDING) {

                }
                //case3: breaking a bond
                if (mDevice.getBondState() == BluetoothDevice.BOND_NONE) {
                } */
            }
        }
    };

    private void startTopair() {
        bluetoothAdapter.cancelDiscovery();
        if (VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            mProgress.cancel();
            mBTDevice.createBond();
        } else {
            Toast.makeText(getApplicationContext(), "You're Device is Unsupported" +
                    " Pls pair bluetooth on settings", Toast.LENGTH_LONG).show();
        }
    }

    private void StartConnectBT() {
        startBTConnection(mBTDevice, MY_UUID_INSECURE);
    }
    public void startBTConnection(BluetoothDevice device, UUID uuid) {
        startClient(device, uuid);
        //Toast.makeText(MainActivity.this, "Trying to connect to Speaking Glove", Toast.LENGTH_LONG).show();
    }

    private void checkBTPermissions() {
        if (VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            int permissionCheck = this.checkSelfPermission("Manifest.permission.ACCESS_FINE_LOCATION");
            permissionCheck += this.checkSelfPermission("Manifest.permission.ACCESS_COARSE_LOCATION");
            if (permissionCheck != 0) {
                this.requestPermissions(new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, 1001); //Any number
            }
        } else {
            Log.d(TAG, "checkBTPermissions: No need to check permissions. SDK version < LOLLIPOP.");
        }
    }


    private void bluetoothONmethod() {

        if (bluetoothAdapter == null ) {
            Toast.makeText(getApplicationContext(), "This device doesn't have bluetooth", Toast.LENGTH_LONG).show();
        } else {
            if (!bluetoothAdapter.isEnabled()) {
                startActivityForResult(btEnablingIntent, requestCodeForeEnable);
                Toast.makeText(getApplicationContext(), "Opening Bluetooth", Toast.LENGTH_LONG).show();
            }
        }
    }
    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        if (requestCode == requestCodeForeEnable) {
            if (resultCode == RESULT_OK) {
                settingUpBluetooth();
                Toast.makeText(getApplicationContext(), "Bluetooth is Enabled",Toast.LENGTH_SHORT).show();
            } else {
                if (resultCode == RESULT_OK) {
                    Toast.makeText(getApplicationContext(),"Bluetooth cancelled to Enable",Toast.LENGTH_SHORT).show();
                }
            }
        } else {
            switch (requestCode) {
                case 10:
                    if (resultCode == RESULT_OK && data != null) {
                        txvResult = (TextView) findViewById(R.id.txvResult);
                        ArrayList<String> result = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
                        txvResult.setText(result.get(0));
                    }
                    break;
            }
        }
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                mDrawerLayout.openDrawer(GravityCompat.START);
                return true;
        }
        return super.onOptionsItemSelected(item);
    }

    //**************************************************************************************************************
    //*****************************************************BLUETOOOTH CONNECTION AND CLASSSSS **********************

    private BluetoothDevice mmDevice;
    private UUID deviceUUID;
    ProgressDialog mProgressDialog;
    private ConnectThread mConnectThread;
    private ConnectedThread mConnectedThread;


    private class ConnectThread extends Thread {
        private BluetoothSocket mmSocket;
        ConnectThread(BluetoothDevice device, UUID uuid) {
            Log.d(TAG, "ConnectThread: started.");
            mmDevice = device;
            deviceUUID = uuid;
        }
        public void run() {
            BluetoothSocket tmp = null;
            Log.i(TAG, "RUN mConnectThread");
            try {
                Log.d(TAG, "ConnectThread: trying to create InsecureRfCommSocket Using UUID"+ MY_UUID_INSECURE);
                tmp = mmDevice.createRfcommSocketToServiceRecord(deviceUUID);
            } catch (IOException e) {
                Log.e(TAG, "ConnectThread: Could not create InsecureRfCommSocket" + e.getMessage());
            }
            mmSocket = tmp;
            bluetoothAdapter.cancelDiscovery();
            try {
                mmSocket.connect();
                Log.d(TAG, "run: ConnectThread Connected.");
            } catch (IOException e) {
                try {
                    mmSocket.close();
                    Log.d(TAG, "run: Closed socket");
                } catch (IOException e1) {
                    Log.e(TAG, "mConnectThread: run: Unable to close connection in Socket" + e1.getMessage());
                }
                Log.d(TAG, "run: ConnectThread: could not connect to UUID" + MY_UUID_INSECURE);
            }
            connected(mmSocket, mmDevice);
        }
        public void cancel() {
            try {
                Log.d(TAG, "cancel: Closing Client Socket");
                mmSocket.close();
            } catch (IOException e) {
                Log.e(TAG, "cancel: close() of mmSocket in  ConnectThread failed." + e.getMessage());
            }
        }
    }

    public void startClient(BluetoothDevice device, UUID uuid) {
        Log.d(TAG, "startClient: Started. ");

        mProgressDialog = ProgressDialog.show(MainActivity.this, "Connecting Bluetooth"
                ,"Please wait...", true);

        mConnectThread = new ConnectThread(device, uuid);
        mConnectThread.start();
    }

    private class ConnectedThread extends Thread {
        private final BluetoothSocket mmSocket;
        private final InputStream mmInstream;
        private final OutputStream mmOutStream;

        ConnectedThread(BluetoothSocket socket) {
            Log.d(TAG, "ConnectedThread: startig. ");

            mmSocket = socket;
            InputStream tmpIn = null;
            OutputStream tmpOut = null;

            try {
                mProgressDialog.dismiss();
            }catch  (NullPointerException e) {
                e.printStackTrace();
            }

            try {
                tmpIn = mmSocket.getInputStream();
                tmpOut = mmSocket.getOutputStream();
            } catch (IOException e) {
                e.printStackTrace();
            }

            mmInstream = tmpIn;
            mmOutStream = tmpOut;
        }
        public void run() {
            byte[] buffer = new byte[1024];
            int bytes;
            while (true) {
                try {
                    // Read from the InputStream
                    bytes = mmInstream.read(buffer);		// Get number of bytes and message in "buffer"
                    handler.obtainMessage(RECIEVE_MESSAGE, bytes, -1, buffer).sendToTarget();		// Send to message queue Handler
                } catch (IOException e) {
                    Log.e(TAG, "write: Error reading InputStream. "+ e.getMessage());
                    break;
                }
            }
        }

        ///Call this method on main activity to send a data
        void write(byte[] bytes) {
            String text = new String(bytes, Charset.defaultCharset());
            Log.d(TAG, "write: Writing to OutputStream: "+ text);
            try {
                mmOutStream.write(bytes);
            } catch (IOException e) {
                Log.e(TAG, "write: Error writing to OutputStream. "+ e.getMessage());
            }
        }
    }

    private void connected(BluetoothSocket mmSocket, BluetoothDevice mmDevice) {
        Log.d(TAG,"connected: Starting...");

        mConnectedThread = new ConnectedThread(mmSocket);
        mConnectedThread.start();
    }

    public void write(byte[] out) {
        ConnectedThread r;

        Log.d(TAG, "write: Write Called. ");
        mConnectedThread.write(out);
    }
     //*******************************************************************************************************
    // ****************************** END OF BLUETOOTH   *****************************************************/

    //********************************** BLUETOOTH SENDING AND RECEIVING ********************************
    private void receiveMsgsCatcher(String id) {

        try {
            Integer.parseInt(id);
            if (Integer.parseInt(id) > 0 && Integer.parseInt(id) < 50) {
                Toast.makeText(getApplicationContext(),"Recived: "+ id, Toast.LENGTH_LONG).show();

                myDB = new DatabaseHelper(getApplicationContext());
                String getRows_speech_text = "SELECT * FROM " + DatabaseHelper.TB_SpeechText + " WHERE " +
                        DatabaseHelper.ID + "=" + id;
                ttp_id = myDB.getWritableDatabase().rawQuery(getRows_speech_text, null);
                if (ttp_id != null && ttp_id.moveToFirst()) {
                    byte[] bytess = ttp_id.getString(ttp_id.getColumnIndex(DatabaseHelper.ST_SpchTxt)).getBytes(Charset.defaultCharset());
                    write(bytess);
                    Toast.makeText(getApplicationContext(), "Data Sent: " + bytess, Toast.LENGTH_SHORT).show();
                    ttp_id.close();
                }
            }
            else if (Integer.parseInt(id) == 155) {
                Toast.makeText(getApplicationContext(), "Start to Gesture now! Rcvd: "+ id, Toast.LENGTH_LONG).show();
            }
            else {
                Toast.makeText(getApplicationContext(),"", Toast.LENGTH_LONG).show();
            }
        } catch (NumberFormatException nfe) {
            Log.d(TAG, "This is not a number. "+ nfe.getMessage());
        }
    }
    //*************************** END SEND RECIEVED BLUETOOTH ************************************
}